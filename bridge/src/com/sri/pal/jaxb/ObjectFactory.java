/*
 * Copyright 2016 SRI International
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.8-b130911.1802 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2016.04.26 at 11:34:50 AM MDT 
//


package com.sri.pal.jaxb;

import javax.xml.bind.JAXBElement;
import javax.xml.bind.annotation.XmlElementDecl;
import javax.xml.bind.annotation.XmlRegistry;
import javax.xml.namespace.QName;


/**
 * This object contains factory methods for each 
 * Java content interface and Java element interface 
 * generated in the com.sri.pal.jaxb package. 
 * <p>An ObjectFactory allows you to programatically 
 * construct new instances of the Java representation 
 * for XML content. The Java representation of XML 
 * content can consist of schema derived interfaces 
 * and classes representing the binding of schema 
 * type definitions, element declarations and model 
 * groups.  Factory methods for each of these are 
 * provided in this class.
 * 
 */
@XmlRegistry
public class ObjectFactory {

    private final static QName _ActionModel_QNAME = new QName("", "actionModel");
    private final static QName _Constraints_QNAME = new QName("", "constraints");
    private final static QName _TaskModel_QNAME = new QName("", "TaskModel");

    /**
     * Create a new ObjectFactory that can be used to create new instances of schema derived classes for package: com.sri.pal.jaxb
     * 
     */
    public ObjectFactory() {
    }

    /**
     * Create an instance of {@link ActionModelType }
     * 
     */
    public ActionModelType createActionModelType() {
        return new ActionModelType();
    }

    /**
     * Create an instance of {@link ConstraintsType }
     * 
     */
    public ConstraintsType createConstraintsType() {
        return new ConstraintsType();
    }

    /**
     * Create an instance of {@link TaskType }
     * 
     */
    public TaskType createTaskType() {
        return new TaskType();
    }

    /**
     * Create an instance of {@link ConstraintInputUnknownType }
     * 
     */
    public ConstraintInputUnknownType createConstraintInputUnknownType() {
        return new ConstraintInputUnknownType();
    }

    /**
     * Create an instance of {@link ActionType }
     * 
     */
    public ActionType createActionType() {
        return new ActionType();
    }

    /**
     * Create an instance of {@link StructType }
     * 
     */
    public StructType createStructType() {
        return new StructType();
    }

    /**
     * Create an instance of {@link GeneralizeUnsupportedType }
     * 
     */
    public GeneralizeUnsupportedType createGeneralizeUnsupportedType() {
        return new GeneralizeUnsupportedType();
    }

    /**
     * Create an instance of {@link TypeRef }
     * 
     */
    public TypeRef createTypeRef() {
        return new TypeRef();
    }

    /**
     * Create an instance of {@link ConstraintInputListType }
     * 
     */
    public ConstraintInputListType createConstraintInputListType() {
        return new ConstraintInputListType();
    }

    /**
     * Create an instance of {@link ConstraintInputConstantType }
     * 
     */
    public ConstraintInputConstantType createConstraintInputConstantType() {
        return new ConstraintInputConstantType();
    }

    /**
     * Create an instance of {@link InheritType }
     * 
     */
    public InheritType createInheritType() {
        return new InheritType();
    }

    /**
     * Create an instance of {@link CollapsibleType }
     * 
     */
    public CollapsibleType createCollapsibleType() {
        return new CollapsibleType();
    }

    /**
     * Create an instance of {@link SetType }
     * 
     */
    public SetType createSetType() {
        return new SetType();
    }

    /**
     * Create an instance of {@link EnumType }
     * 
     */
    public EnumType createEnumType() {
        return new EnumType();
    }

    /**
     * Create an instance of {@link ListType }
     * 
     */
    public ListType createListType() {
        return new ListType();
    }

    /**
     * Create an instance of {@link RequireType }
     * 
     */
    public RequireType createRequireType() {
        return new RequireType();
    }

    /**
     * Create an instance of {@link ConstraintNotType }
     * 
     */
    public ConstraintNotType createConstraintNotType() {
        return new ConstraintNotType();
    }

    /**
     * Create an instance of {@link ConstraintOrType }
     * 
     */
    public ConstraintOrType createConstraintOrType() {
        return new ConstraintOrType();
    }

    /**
     * Create an instance of {@link IdiomTemplateType }
     * 
     */
    public IdiomTemplateType createIdiomTemplateType() {
        return new IdiomTemplateType();
    }

    /**
     * Create an instance of {@link ConstraintDeclParamType }
     * 
     */
    public ConstraintDeclParamType createConstraintDeclParamType() {
        return new ConstraintDeclParamType();
    }

    /**
     * Create an instance of {@link GeneralizeSingletonType }
     * 
     */
    public GeneralizeSingletonType createGeneralizeSingletonType() {
        return new GeneralizeSingletonType();
    }

    /**
     * Create an instance of {@link ActionIdiomFamilyType }
     * 
     */
    public ActionIdiomFamilyType createActionIdiomFamilyType() {
        return new ActionIdiomFamilyType();
    }

    /**
     * Create an instance of {@link SubTypeType }
     * 
     */
    public SubTypeType createSubTypeType() {
        return new SubTypeType();
    }

    /**
     * Create an instance of {@link MetadataType }
     * 
     */
    public MetadataType createMetadataType() {
        return new MetadataType();
    }

    /**
     * Create an instance of {@link NullableType }
     * 
     */
    public NullableType createNullableType() {
        return new NullableType();
    }

    /**
     * Create an instance of {@link ParamType }
     * 
     */
    public ParamType createParamType() {
        return new ParamType();
    }

    /**
     * Create an instance of {@link ConstraintInputRefType }
     * 
     */
    public ConstraintInputRefType createConstraintInputRefType() {
        return new ConstraintInputRefType();
    }

    /**
     * Create an instance of {@link FamilyType }
     * 
     */
    public FamilyType createFamilyType() {
        return new FamilyType();
    }

    /**
     * Create an instance of {@link IdiomTemplateNamedActionType }
     * 
     */
    public IdiomTemplateNamedActionType createIdiomTemplateNamedActionType() {
        return new IdiomTemplateNamedActionType();
    }

    /**
     * Create an instance of {@link ActionFamilyParamType }
     * 
     */
    public ActionFamilyParamType createActionFamilyParamType() {
        return new ActionFamilyParamType();
    }

    /**
     * Create an instance of {@link TypeType }
     * 
     */
    public TypeType createTypeType() {
        return new TypeType();
    }

    /**
     * Create an instance of {@link ParamClassType }
     * 
     */
    public ParamClassType createParamClassType() {
        return new ParamClassType();
    }

    /**
     * Create an instance of {@link IdiomType }
     * 
     */
    public IdiomType createIdiomType() {
        return new IdiomType();
    }

    /**
     * Create an instance of {@link ConstraintDeclarationType }
     * 
     */
    public ConstraintDeclarationType createConstraintDeclarationType() {
        return new ConstraintDeclarationType();
    }

    /**
     * Create an instance of {@link IdiomTemplateActionType }
     * 
     */
    public IdiomTemplateActionType createIdiomTemplateActionType() {
        return new IdiomTemplateActionType();
    }

    /**
     * Create an instance of {@link IdiomTemplateNamedActionParamType }
     * 
     */
    public IdiomTemplateNamedActionParamType createIdiomTemplateNamedActionParamType() {
        return new IdiomTemplateNamedActionParamType();
    }

    /**
     * Create an instance of {@link ConstraintAndType }
     * 
     */
    public ConstraintAndType createConstraintAndType() {
        return new ConstraintAndType();
    }

    /**
     * Create an instance of {@link StructMemberType }
     * 
     */
    public StructMemberType createStructMemberType() {
        return new StructMemberType();
    }

    /**
     * Create an instance of {@link ActionIdiomParamType }
     * 
     */
    public ActionIdiomParamType createActionIdiomParamType() {
        return new ActionIdiomParamType();
    }

    /**
     * Create an instance of {@link CustomType }
     * 
     */
    public CustomType createCustomType() {
        return new CustomType();
    }

    /**
     * Create an instance of {@link IdiomTemplateActionParamType }
     * 
     */
    public IdiomTemplateActionParamType createIdiomTemplateActionParamType() {
        return new IdiomTemplateActionParamType();
    }

    /**
     * Create an instance of {@link ConstraintParamType }
     * 
     */
    public ConstraintParamType createConstraintParamType() {
        return new ConstraintParamType();
    }

    /**
     * Create an instance of {@link CollapsibleParamType }
     * 
     */
    public CollapsibleParamType createCollapsibleParamType() {
        return new CollapsibleParamType();
    }

    /**
     * Create an instance of {@link MemberType }
     * 
     */
    public MemberType createMemberType() {
        return new MemberType();
    }

    /**
     * Create an instance of {@link BagType }
     * 
     */
    public BagType createBagType() {
        return new BagType();
    }

    /**
     * Create an instance of {@link ConstraintType }
     * 
     */
    public ConstraintType createConstraintType() {
        return new ConstraintType();
    }

    /**
     * Create an instance of {@link IdiomParamType }
     * 
     */
    public IdiomParamType createIdiomParamType() {
        return new IdiomParamType();
    }

    /**
     * Create an instance of {@link ConstraintInputFuncType }
     * 
     */
    public ConstraintInputFuncType createConstraintInputFuncType() {
        return new ConstraintInputFuncType();
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link ActionModelType }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = "", name = "actionModel")
    public JAXBElement<ActionModelType> createActionModel(ActionModelType value) {
        return new JAXBElement<ActionModelType>(_ActionModel_QNAME, ActionModelType.class, null, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link ConstraintsType }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = "", name = "constraints")
    public JAXBElement<ConstraintsType> createConstraints(ConstraintsType value) {
        return new JAXBElement<ConstraintsType>(_Constraints_QNAME, ConstraintsType.class, null, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link TaskType }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = "", name = "TaskModel")
    public JAXBElement<TaskType> createTaskModel(TaskType value) {
        return new JAXBElement<TaskType>(_TaskModel_QNAME, TaskType.class, null, value);
    }

}
