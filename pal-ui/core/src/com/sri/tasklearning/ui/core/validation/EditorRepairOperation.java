/*
 * Copyright 2016 SRI International
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.sri.tasklearning.ui.core.validation;

import com.sri.ai.lumen.atr.ATR;
import com.sri.ai.lumen.util.repair.RepairOperation;
import com.sri.ai.lumen.util.repair.RepairOperationChangeParameter;
import com.sri.ai.lumen.util.repair.RepairOperationDeleteStep;
import com.sri.ai.lumen.util.repair.RepairOperationSetVariable;
import com.sri.tasklearning.ui.core.BackendFacade;
import com.sri.tasklearning.ui.core.ProcedureEditController;
import com.sri.tasklearning.ui.core.PalUiException;
import com.sri.tasklearning.ui.core.VariableManager;
import com.sri.tasklearning.ui.core.procedure.ProcedureModel;
import com.sri.tasklearning.ui.core.step.StepModel;

/**
 * Abstract base class for the PAL UI's repair operations. When
 * Lumen detects a validation error, it calculates a list of suggested repair
 * operations. It's up to this class and its derivations to implement the actual
 * repair logic for a variety of suggestion types. 
 */
public abstract class EditorRepairOperation extends RepairOperation {
    private static final long serialVersionUID = 1L;
    
    /* The wrapped operation. */
    private RepairOperation operation;
    /* A variable manager */
    protected VariableManager varMgr; 
    /* The procedure model in which to locate the operation. */
    protected ProcedureModel procModel;
    /* The controller instance that applies to this procedure */
    protected ProcedureEditController controller;
    /* The step containing this operation, if any. */
    private StepModel step;
    /* The actual model at this operation's location. */
    private final ATR location;

    /**
     * A factory that creates EditorRepairOperations.
     * 
     * @param operation
     *            the wrapped operation
     * @param procModel
     *            the procedure model in which to locate the operation
     * @return an EditorRepairOperation that knows how to apply the
     *         RepairOperation that it is wrapping
     */
    public static EditorRepairOperation create(RepairOperation operation, ProcedureModel procModel) throws PalUiException {
        
        if (operation instanceof RepairOperationChangeParameter) {
            return new EditorRepairOperationChangeParameter(operation,
                    procModel);
        } else if (operation instanceof RepairOperationDeleteStep) {
            return new EditorRepairOperationDeleteStep(operation, procModel);       
        } else if (operation instanceof RepairOperationSetVariable) {
            return new EditorRepairOperationSetVariable(operation, 
                    procModel);
        } else {
            throw new PalUiException(
                    "Unsupported repair operation: " + operation +
                    " class: " + operation.getClass());
        }
    }

    /**
     * For use by sub-classes that extend RepairOperations generated by lumen.
     * 
     * @param op
     *            - The RepairOperation from lumen
     * @param proc
     *            - The ProcedudueModel that contains the error for which this
     *            EditorRepairOperation applies
     */
    protected EditorRepairOperation(RepairOperation op, ProcedureModel proc) {
        operation  = op;
        procModel  = proc;
        location   = BackendFacade.locate(this.getPreorderIndex(), procModel); 
        varMgr     = proc.getVariableManager();
        controller = proc.getController();

        com.sri.ai.lumen.atr.ATR model = BackendFacade.locate(this.getPreorderIndex(), procModel);
        
        if (model instanceof StepModel) {
            step = (StepModel) model;
        } else {
            // Attempt to handle the default location being an argument
            final com.sri.ai.lumen.atr.ATR toRet = BackendFacade.locate(this.getPreorderIndex(),
                    procModel, 1);
            step = (toRet instanceof StepModel) ? ((StepModel) toRet) : (null);
        }
    }

    /**
     * For use by EditorRepairOperation sub-classes that are generated solely by
     * the UI, such as Undo. Lumen has no knowledge of Undo as a potential fix,
     * but we want our RepairOperations to look just like those generated by
     * lumen.
     * 
     * @param proc
     *            - The ProcedudueModel that contains the error for which this
     *            EditorRepairOperation applies
     */    
    protected EditorRepairOperation(ProcedureModel proc) {
        procModel = proc;
        location = null; 
    }
    
    public RepairOperation getOperation() {
        return this.operation;
    }

    public ATR getLocation() {
        return location;
    }

    public StepModel getStep() {
        return this.step;
    }

    /**
     * Applies the operation described by this class.
     */
    public abstract boolean applyOperation();

    @Override
    public int getPreorderIndex() {
        return getOperation().getPreorderIndex();
    }

    @Override
    public String toString() {
        return getOperation().toString();
    }

    public abstract EditorRepairUI getSuggestionUI(EditorIssue issue);
}