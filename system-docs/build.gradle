/*
 * Copyright 2016 SRI International
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// $Id: build.gradle 7401 2016-03-25 20:18:20Z Chris Jones (E24486) $

ext.buildDir = file("build")
ext.dbDir = file("${buildDir}/docbook")
ext.dbVers = "1.75.2"
ext.xslDir = file("${dbDir}/docbook-xsl-${dbVers}-resources/docbook/xhtml")
ext.xslFile = file("$xslDir/docbook.xsl")
ext.xmlDir = file("xml")
ext.xmlLib = file("$xmlDir/lib")
ext.xmlBook = file("$xmlDir/common/books/PAL-book.xml")
ext.htmlDir = file("$buildDir/html")
ext.htmlBook = file("$htmlDir/PAL-book.html")

configurations {
    archives
    docbook
    xalan
}

task docbook(dependsOn: configurations.docbook) {
    outputs.dir dbDir
    doLast {
        mkdir(dbDir)
        configurations.docbook.files.each { File f ->
            def basename = f.name.replaceFirst('\\.[a-z]+$', '')
            FileTree files = zipTree(f)
            copy {
                from files
                into "${dbDir}/${basename}"
            }
        }
    }
}

task book(dependsOn: [docbook, configurations.xalan]) {
    inputs.dir(xmlDir)
    outputs.dir(htmlDir)
    doLast {
        mkdir(htmlDir)
        javaexec {
            classpath = files(configurations.xalan.files + xmlLib)
            systemProperty "org.apache.xerces.xni.parser.XMLParserConfiguration", "org.apache.xerces.parsers.XIncludeParserConfiguration"
            main = "org.apache.xalan.xslt.Process"
            args("-in", "$xmlBook",
                 "-out", "$htmlBook",
                 "-xsl", "$xslFile",
                 "-EntityResolver", "org.apache.xml.resolver.tools.CatalogResolver",
                 "-URIResolver", "org.apache.xml.resolver.tools.CatalogResolver",
                 "-PARAM", "section.autolabel", "1")
        }

        // TODO Verify $htmlBook was created, and is non-zero size.

        mkdir "$htmlDir/graphics"
        copy {
            from "$xmlDir"
            include "**/graphics/*"
            into "$htmlDir/graphics"
            eachFile { f ->
                f.setPath(f.name)
            }
        }
        // TODO Remove empty dirs from the above copy.
    }
}

task zip(dependsOn: book, type: Zip) {
    baseName = "pal-system"
    classifier = "doc"
    destinationDir = buildDir
    from(xmlDir) {
        into "xml"
    }
    from(htmlDir) {
        into "html"
    }
}

task clean {
    doLast {
        delete(buildDir)
    }
}

dependencies {
    docbook 'org.docbook:docbook-xml:4.4'
    docbook 'net.sf.docbook:docbook-xsl:1.75.2:resources@zip'
    xalan 'xalan:xalan:2.7.1'
    // xalan 'xalan:serializer:2.7.1'
    xalan 'xerces:xercesImpl:2.9.0'
    xalan 'xml-resolver:xml-resolver:1.2'
    // xalan 'xml-apis:xml-apis:1.3.04'
}

artifacts {
    archives zip
}
